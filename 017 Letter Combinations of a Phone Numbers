# 017 Letter Combination of a Phone Number

* * *
``Problem Statement``
  
<p>
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
</p>
image.png

***

`Solution :`

```
# 
dmap = {'2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz',
        '0': ' ',
        None: None}

class Solution(object):
    def letterCombinations(self, digits):
        # DFS
        result = []
        ls = len(digits)
        if ls == 0:
            return result
        current = digits[0]
        posfix = self.letterCombinations(digits[1:])
        for t in dmap[current]:
            if len(posfix) > 0:
                for p in posfix:
                    temp = t + p
                    result.append(temp)
            else:
                result.append(t)
        return result
#

```

`Output:`

```
Input: digits ="23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
```

```
Input: digits =""
Output: []
```

```
Input: digits ="2"
Output: ["a","b","c"]
```
